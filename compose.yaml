services:
  postgres:
    image: postgres:17.2-alpine3.21
    container_name: postgres
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -h ${DB_HOST} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_HOST: ${DB_HOST}
    ports:
      - "5432:5432"
    networks:
      - distributed-network
    volumes:
      - db-data:/var/lib/postgresql/data

  rabbit:
    image: rabbitmq:3
    container_name: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - distributed-network

  image-service:
    build: 
      context: .
      dockerfile: image.Dockerfile
    environment:
      - PORT=8081
    deploy:
      replicas: 2
    networks:
      - distributed-network
    volumes:
      - ./images:/images
    depends_on:
      - postgres
  
  image-service-async:
    build: 
      context: .
      dockerfile: async.Dockerfile
    deploy:
      replicas: 2
    networks:
      - distributed-network
    volumes:
      - ./images:/images
    depends_on:
      - rabbit

  image-nginx-lb:
    image: nginx:1.27.3-alpine
    container_name: image-nginx-lb
    command: ["nginx", "-g", "daemon off;"]
    networks:
      - distributed-network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - image-service

  api-service:
    build: 
     context: .
     dockerfile: main.Dockerfile
    container_name: api-service
    ports:
      - "8080:8080"
    networks:
      - distributed-network
    volumes:
      - ./images:/images
    depends_on:
      - postgres

volumes:
  db-data:
    name: db-data
    external: true

networks:
  distributed-network:
    external: true